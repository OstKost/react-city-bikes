{"version":3,"sources":["modules/Networks/networksStyles.module.scss","library/common/commonComponents/ListLoader/style.module.scss","modules/Networks/components/NetworksList/styles.module.scss","modules/Networks/components/NetworksListItem/styles.module.scss","modules/Networks/components/StationsListItem/styles.module.scss","modules/Networks/components/StationsList/styles.module.scss","modules/Networks/components/NetworkSummary/styles.module.scss","library/common/commonComponents/ListLoader/ListLoader.tsx","library/common/commonComponents/ListEmpty/ListEmpty.tsx","modules/Networks/components/NetworksListItem/NetworksListItem.tsx","modules/Networks/components/NetworksList/NetworksList.tsx","modules/Networks/components/StationsListItem/StationsListItem.tsx","modules/Networks/components/StationsList/StationsList.tsx","modules/Networks/components/NetworkSummary/NetworkSummary.tsx","modules/Networks/NetworksModule.tsx","library/common/commonSelectors/networksSelectors.ts","library/common/commonSelectors/stationsSelectors.ts","library/common/commonSelectors/likedStationsSelectors.ts","modules/Networks/NetworksContainer.tsx"],"names":["module","exports","ListLoader","className","style","container","foregroundColor","ListEmpty","message","fontSize","textAlign","NetworksListItem","network","styles","item","to","id","link","activeClassName","activeNavLink","name","NetworksList","networks","isLoading","length","list","height","width","itemSize","itemCount","index","StationsListItem","station","isLiked","likeStationHandler","free_bikes","likeButton","onClick","type","size","color","StationsList","stations","likedStations","map","key","some","NetworkSummary","summary","networkName","freeBikes","NetworksModule","isLoadingNetworks","isLoadingStations","title","lists","listTitle","networksTitle","stationsTitle","selectNetworks","createSelector","state","error","selectStations","selectLikedStations","NetworksContainer","dispatch","useDispatch","useParams","networkId","networksState","useSelector","stationsState","likedStationsState","networkToFind","fetchNetworksHandler","useCallback","a","fetchNetworks","fetchStationsHandler","fetchStations","useEffect","ntwId","find","ntw","getNetworkName","reduce","acc","stationId","newState","toggleLikeStations"],"mappings":"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","file":"static/js/3.72ebe549.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"networksStyles_container__3Qqij\",\"title\":\"networksStyles_title__fjlrJ\",\"lists\":\"networksStyles_lists__sR4f5\",\"listTitle\":\"networksStyles_listTitle__MVYMF\",\"networksTitle\":\"networksStyles_networksTitle__1eKWv\",\"networks\":\"networksStyles_networks__1yIrD\",\"stationsTitle\":\"networksStyles_stationsTitle__3D6tl\",\"stations\":\"networksStyles_stations__omjZI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__m1F-8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"styles_list__2N7en\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"styles_item__3sIEk\",\"link\":\"styles_link__3sqGE\",\"activeNavLink\":\"styles_activeNavLink__31FG5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"styles_item__zNDTF\",\"likeButton\":\"styles_likeButton__3livi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"styles_list__26gnG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1_s_n\"};","import React from 'react';\nimport { BulletList } from 'react-content-loader';\nimport style from './style.module.scss';\n\nconst ListLoader = () => {\n  return (\n    <div className={style.container}>\n      <BulletList foregroundColor='#0f7987' />\n    </div>\n  );\n};\n\nexport default ListLoader;\n","import React from 'react';\n\nconst ListEmpty = ({ message = 'Nothing there...' }: { message?: string }) => {\n  return <h3 style={{ fontSize: 20, textAlign: 'center' }}>{message}</h3>;\n};\n\nexport default ListEmpty;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport styles from './styles.module.scss';\nimport { Network } from 'library/interfaces';\n\ninterface Props {\n  network: Network;\n  style: Object;\n}\n\nconst NetworksListItem = ({ network, style }: Props) => {\n  return (\n    <div style={style} className={styles.item}>\n      <NavLink\n        to={`/networks/${network.id}`}\n        className={styles.link}\n        activeClassName={styles.activeNavLink}\n      >\n        {network.name}\n      </NavLink>\n    </div>\n  );\n};\n\nexport default NetworksListItem;\n","import React from 'react';\nimport { FixedSizeList as List } from 'react-window';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Network } from 'library/interfaces';\nimport ListLoader from 'library/common/commonComponents/ListLoader/ListLoader';\nimport ListEmpty from 'library/common/commonComponents/ListEmpty/ListEmpty';\nimport styles from './styles.module.scss';\nimport NetworksListItem from '../NetworksListItem/NetworksListItem';\n\ninterface Props {\n  networks: Network[];\n  isLoading: boolean;\n}\n\nconst NetworksList = ({ networks, isLoading }: Props) => {\n  if (!networks.length && isLoading) {\n    return <ListLoader />;\n  }\n\n  if (!networks.length && !isLoading) {\n    return <ListEmpty />;\n  }\n\n  return (\n    <div className={styles.list}>\n      <AutoSizer>\n        {({ height, width }: any) => (\n          <List\n            width={width}\n            height={height}\n            itemSize={41}\n            itemCount={networks.length}\n          >\n            {({ index, style }: any) => (\n              <NetworksListItem network={networks[index]} style={style} />\n            )}\n          </List>\n        )}\n      </AutoSizer>\n    </div>\n  );\n};\n\nexport default NetworksList;\n","import React from 'react';\nimport { FaHeart } from 'react-icons/fa';\nimport styles from './styles.module.scss';\nimport { Station } from 'library/interfaces';\n\ninterface Props {\n  station: Station;\n  isLiked: boolean;\n  likeStationHandler: (stationId: string, newState: boolean) => void;\n}\n\nconst StationsListItem = ({ station, isLiked, likeStationHandler }: Props) => {\n  return (\n    <li className={styles.item}>\n      {`${station.name} (Free bikes: ${station.free_bikes ?? 0})`}\n      <button\n        className={styles.likeButton}\n        onClick={() => likeStationHandler(station.id, !isLiked)}\n        type='button'\n      >\n        <FaHeart size='1.3em' color={isLiked ? 'red' : 'black'} />\n      </button>\n    </li>\n  );\n};\n\nexport default StationsListItem;\n","import React from 'react';\nimport { Station } from 'library/interfaces';\nimport ListLoader from 'library/common/commonComponents/ListLoader/ListLoader';\nimport ListEmpty from 'library/common/commonComponents/ListEmpty/ListEmpty';\nimport StationsListItem from '../StationsListItem/StationsListItem';\nimport styles from './styles.module.scss';\n\ninterface Props {\n  stations: Station[];\n  likedStations: string[];\n  isLoading: boolean;\n  likeStationHandler: (stationId: string, newState: boolean) => void;\n}\n\nconst StationsList = ({\n  stations,\n  likedStations,\n  isLoading,\n  likeStationHandler\n}: Props) => {\n  if (isLoading) {\n    return <ListLoader />;\n  }\n\n  if (!stations.length && !isLoading) {\n    return <ListEmpty message='This network has no stations =(' />;\n  }\n\n  return (\n    <ul className={styles.list}>\n      {stations.map(station => (\n        <StationsListItem\n          key={station.id}\n          station={station}\n          isLiked={likedStations.some(id => id === station.id)}\n          likeStationHandler={likeStationHandler}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default StationsList;\n","import React from 'react';\nimport styles from './styles.module.scss';\nimport { INetworkSummary } from 'library/interfaces';\n\ninterface Props {\n  summary: INetworkSummary;\n  isLoading: boolean;\n}\n\nconst NetworkSummary = ({ summary, isLoading }: Props) => {\n  return (\n    <div className={styles.container}>\n      <h2>{summary.networkName}</h2>\n      <p>\n        <span>Total free bikes: </span>\n        <span>{isLoading ? 'Calculating...' : summary.freeBikes}</span>\n      </p>\n    </div>\n  );\n};\n\nexport default NetworkSummary;\n","import React from 'react';\nimport styles from './networksStyles.module.scss';\nimport NetworksList from './components/NetworksList/NetworksList';\nimport StationsList from './components/StationsList/StationsList';\nimport { Network, Station, INetworkSummary } from 'library/interfaces';\nimport NetworkSummary from './components/NetworkSummary/NetworkSummary';\n\ninterface Props {\n  networks: Network[];\n  stations: Station[];\n  likedStations: string[];\n  isLoadingNetworks: boolean;\n  isLoadingStations: boolean;\n  summary: INetworkSummary;\n  likeStationHandler: (stationId: string, newState: boolean) => void;\n}\n\nconst NetworksModule = ({\n  networks,\n  stations,\n  likedStations,\n  summary,\n  isLoadingNetworks,\n  isLoadingStations,\n  likeStationHandler\n}: Props) => {\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>Networks Page</h1>\n      <NetworkSummary\n        summary={summary}\n        isLoading={isLoadingNetworks || isLoadingStations}\n      />\n      <div className={styles.lists}>\n        <h3 className={`${styles.listTitle} ${styles.networksTitle}`}>\n          Networks\n        </h3>\n        <div className={styles.networks}>\n          <NetworksList networks={networks} isLoading={isLoadingNetworks} />\n        </div>\n        <h3 className={`${styles.listTitle} ${styles.stationsTitle}`}>\n          Stations\n        </h3>\n        <div className={styles.stations}>\n          <StationsList\n            stations={stations}\n            likedStations={likedStations}\n            isLoading={isLoadingStations}\n            likeStationHandler={likeStationHandler}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NetworksModule;\n","import { createSelector } from 'reselect';\nimport { State } from 'main/mainReducer';\n\nexport const selectNetworks = createSelector(\n  (state: State) => state.networks,\n  ({ networks, isLoading, error }) => ({\n    networks,\n    isLoadingNetworks: isLoading,\n    error\n  })\n);\n","import { createSelector } from 'reselect';\nimport { State } from 'main/mainReducer';\n\nexport const selectStations = createSelector(\n  (state: State) => state.stations,\n  ({ stations, isLoading, error }) => ({\n    stations,\n    isLoadingStations: isLoading,\n    error\n  })\n);\n","import { createSelector } from 'reselect';\nimport { State } from 'main/mainReducer';\n\nexport const selectLikedStations = createSelector(\n  (state: State) => state.likedStations,\n  ({ likedStations }) => ({\n    likedStations\n  })\n);\n","import React, { useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { INetworkSummary, Station, Network } from 'library/interfaces';\nimport NetworksModule from './NetworksModule';\nimport {\n  selectNetworks,\n  selectStations,\n  selectLikedStations\n} from 'library/common/commonSelectors';\nimport {\n  fetchNetworks,\n  fetchStations,\n  toggleLikeStations\n} from 'library/common/commonActions';\n\nconst NetworksContainer = () => {\n  const dispatch = useDispatch();\n  const { networkId: id } = useParams();\n  const networksState = useSelector(selectNetworks);\n  const stationsState = useSelector(selectStations);\n  const likedStationsState = useSelector(selectLikedStations);\n\n  const networkToFind = id ?? networksState.networks[0]?.id ?? '';\n\n  const fetchNetworksHandler = useCallback(async () => {\n    await dispatch(fetchNetworks());\n  }, [dispatch]);\n\n  const fetchStationsHandler = useCallback(async () => {\n    await dispatch(fetchStations(networkToFind));\n  }, [dispatch, networkToFind]);\n\n  useEffect(() => {\n    fetchNetworksHandler();\n  }, [fetchNetworksHandler]);\n\n  useEffect(() => {\n    fetchStationsHandler();\n  }, [fetchStationsHandler]);\n\n  useEffect(() => {}, []);\n\n  const likeStationHandler = (stationId: string, newState: boolean) => {\n    dispatch(toggleLikeStations(stationId, newState));\n  };\n\n  const getNetworkName = (list: Network[], ntwId: string | undefined) => {\n    if (!list.length) {\n      return 'Loading...';\n    }\n    if (ntwId) {\n      return list.find(ntw => ntw.id === ntwId)?.name || '';\n    }\n    return list[0].name;\n  };\n\n  const getTotalFreeBikes = (list: Station[]) => {\n    return list.reduce((acc, station) => acc + station.free_bikes ?? 0, 0);\n  };\n\n  const summary: INetworkSummary = {\n    networkName: getNetworkName(networksState.networks, networkToFind),\n    freeBikes: getTotalFreeBikes(stationsState.stations)\n  };\n\n  return (\n    <NetworksModule\n      {...networksState}\n      {...stationsState}\n      {...likedStationsState}\n      summary={summary}\n      likeStationHandler={likeStationHandler}\n    />\n  );\n};\n\nexport default NetworksContainer;\n"],"sourceRoot":""}